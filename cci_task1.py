# -*- coding: utf-8 -*-
"""CCI Task1

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qA8qzsdEhnpyMlWo2qgCo73L7XQlOD5t
"""



!pip install discord.py
!pip install tinydb



!pip install nest-asyncio
import nest_asyncio
nest_asyncio.apply()

discord_token="MTEzMzM1NzM0NzM4MTcyNzI1Mg.GisHm0.1Hkbl8bXhOZRan2kr6Q38LyICttz-Ezu5axnAs"



from discord.ext import commands
import discord
from tinydb import TinyDB,Query
intents=discord.Intents.all()



bot=commands.Bot(command_prefix="!",intents=intents)
def run():
  @bot.event
  async def command(message: discord.Message):
    bot.run(discord_token)
run()



bot=commands.Bot(command_prefix="!",intents=intents)
def run():
  @bot.event
  async def command(message:discord.Message):
    bot.run(discord_token)
run()



bot=commands.Bot(command_prefix="!",intents=intents)
def run():
  @bot.command()
  async def repeat(ctx,msg="WHAT"):

   @bot.command()
   async def thanks(ctx,mention):
    @bot.group()
    async def greet(ctx):
      @greet.command()
      async def thanks(ctx,mention):
        @greet.command()
        async def welcome(ctx,mention):

         bot.run(discord_token)

run()

import discord
intents=discord.Intents.default()
intents.message_content=True
client=discord.Client(intents=intents)
@client.event
async def on_ready():
  print(f"Logged in as {client.user.name}")
@client.event
async def on_message(message):
  if message.content.startswith("!poll"):
    poll_question="What's 35*3?"
    poll_options=["106","105","108"]
    poll_message=f"{poll_question}\n"
    for index,option in enumerate(poll_options):
      poll_message+=f"{index+1}.{option}\n"
    await message.channel.send(poll_message)
@client.event
async def on_reaction_add(reaction,user):
  global poll_message
  global vote_counts
  if user !=client.user and reaction.message==poll_message:
    selected_option=reaction.emoji
    if selected_option in poll_options:
      vote_counts[selected_option]+=1
@client.event
async def display_poll_results():
  global poll_message
  global vote_counts
  most_popular=max(vote_counts,key=vote_counts.get)
  result_message="Poll Results:\n"
  for option,count in vote_counts.items():
    result_message+=f"{option}:{count}votes\n"
  result_message+=f"Most Popular Option:{most_popular}"
  await poll_message.edit(content=result_message)

client.run("MTEzMzM1NzM0NzM4MTcyNzI1Mg.GisHm0.1Hkbl8bXhOZRan2kr6Q38LyICttz-Ezu5axnAs")

import discord
intents=discord.Intents.default()

client=discord.Client(intents=intents)
poll_question="What's 35*3?"
poll_options=["106","105","108"]
poll_message=None
vote_counts={option:0 for option in poll_options}
@client.event
async def on_message(message):
  if message.content.startswith("!poll"):
    global poll_question
    global vote_counts
    poll_message=await message.channel.send(poll_question)
    for option in poll_options:
      await poll_message.add_reaction(option)
@client.event
async def on_reaction_add(reaction,user):
  global poll_message
  global vote_counts
  if user !=client.user and reaction.message==poll_message:
    selected_option=reaction.emoji
    if selected_option in poll_options:
      vote_counts[selected_option]+=1
@client.event
async def display_poll_results():
  global poll_message
  global vote_counts
  most_popular=max(vote_counts,key=vote_counts.get)
  result_message="Poll Results:\n"
  for option,count in vote_counts.items():
    result_message+=f"{option}:{count}votes\n"
  result_message+=f"Most Popular Option:{most_popular}"
  await poll_message.edit(content=result_message)
client.run("MTEzMzM1NzM0NzM4MTcyNzI1Mg.GisHm0.1Hkbl8bXhOZRan2kr6Q38LyICttz-Ezu5axnAs")